<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\bwhoop.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\bwhoop.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Mar 15 10:04:15 2018
<BR><P>
<H3>Maximum Stack Usage =        452 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; esc4wayProcess &rArr; Connect &rArr; BL_ConnectEx &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from main.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[8]">PVD_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[b]">RCC_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[9]">RTC_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from drv_time.o(i.SysTick_Handler) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f031.o(.text)
 <LI><a href="#[17]">TIM14_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[7]">WWDG_IRQHandler</a> from startup_stm32f031.o(.text) referenced from startup_stm32f031.o(RESET)
 <LI><a href="#[20]">filter_kalman::filter_kalman()</a> from filter.o(i._ZN13filter_kalmanC1Ev) referenced from filter.o(i.__sti___10_filter_cpp_filter)
 <LI><a href="#[1f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f031.o(.text)
 <LI><a href="#[21]">__sti___10_filter_cpp_filter</a> from filter.o(i.__sti___10_filter_cpp_filter) referenced from filter.o(.init_array)
 <LI><a href="#[1d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledflash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ConnectEx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[f8]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_hard_coded_pid_identifier
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apid
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcmagnitude
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastcos
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpffilter
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpffilter
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc_hz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodepacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_hard_coded_pid_identifier
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pid_value
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcmagnitude
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc_hz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpffilter
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_precalc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcmagnitude
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpffilter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc
</UL>

<P><STRONG><a name="[59]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packettodata
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
</UL>

<P><STRONG><a name="[fa]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[fb]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packettodata
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodepacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_hard_coded_pid_identifier
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2b]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[38]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[33]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ff]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7f]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[79]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[78]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_DMARequestModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7e]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7b]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[80]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7a]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7d]"></a>ADC_VrefintCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_VrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[3a]"></a>BL_ConnectEx</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, serial_4way_avrootloader.o(i.BL_ConnectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BL_ConnectEx &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadBuf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_input
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
</UL>

<P><STRONG><a name="[41]"></a>BL_PageErase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BL_PageErase &rArr; BL_SendCMDSetAddress &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[46]"></a>BL_ReadEEprom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_ReadEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BL_ReadEEprom &rArr; BL_ReadA &rArr; BL_SendCMDSetAddress &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadA
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[47]"></a>BL_ReadFlash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_ReadFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BL_ReadFlash &rArr; BL_ReadA &rArr; BL_SendCMDSetAddress &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadA
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[4a]"></a>BL_SendCMDKeepAlive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_SendCMDKeepAlive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL_SendCMDKeepAlive &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[4b]"></a>BL_SendCMDRunRestartBootloader</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_SendCMDRunRestartBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL_SendCMDRunRestartBootloader &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[4d]"></a>BL_VerifyFlash</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, serial_4way_avrootloader.o(i.BL_VerifyFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BL_VerifyFlash &rArr; BL_SendCMDSetBuffer &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetBuffer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[4f]"></a>BL_WriteEEprom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_WriteEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BL_WriteEEprom &rArr; BL_WriteA &rArr; BL_SendCMDSetBuffer &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[50]"></a>BL_WriteFlash</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_WriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BL_WriteFlash &rArr; BL_WriteA &rArr; BL_SendCMDSetBuffer &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[81]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[77]"></a>DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI4_15_IRQHandler &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase
</UL>

<P><STRONG><a name="[56]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeword
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase
</UL>

<P><STRONG><a name="[55]"></a>FLASH_ProgramWord</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f0xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeword
</UL>

<P><STRONG><a name="[b7]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
</UL>

<P><STRONG><a name="[54]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f0xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[74]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_tx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_rx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mosi_input
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoutput
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_init
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledoff
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledon
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HardFault_Handler &rArr; failloop &rArr; pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Q_rsqrt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, imu.o(i.Q_rsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcmagnitude
</UL>

<P><STRONG><a name="[76]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[75]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>filter_kalman::filter_kalman()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter.o(i._ZN13filter_kalmanC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> filter.o(i.__sti___10_filter_cpp_filter)
</UL>
<P><STRONG><a name="[102]"></a>filter_kalman::filter_kalman__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, filter.o(i._ZN13filter_kalmanC1Ev), UNUSED)

<P><STRONG><a name="[36]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a1]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flip_sequencer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_filter_cpp_filter
</UL>

<P><STRONG><a name="[103]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5e]"></a>_crc_xmodem_update</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_4way.o(i._crc_xmodem_update))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteCrc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteCrc
</UL>

<P><STRONG><a name="[63]"></a>_readbyte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_softi2c.o(i._readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _readbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoutput
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scllow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readsda
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>

<P><STRONG><a name="[67]"></a>_readsda</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_softi2c.o(i._readsda))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>

<P><STRONG><a name="[6a]"></a>_restart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_softi2c.o(i._restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _restart &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>

<P><STRONG><a name="[6b]"></a>_sendbyte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_softi2c.o(i._sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scllow
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhighlow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>

<P><STRONG><a name="[6d]"></a>_sendstart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_softi2c.o(i._sendstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _sendstart &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readsda
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>

<P><STRONG><a name="[6e]"></a>_sendstop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_softi2c.o(i._sendstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _sendstop &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>

<P><STRONG><a name="[6f]"></a>acc_cal</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sixaxis.o(i.acc_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = acc_cal &rArr; sixaxis_read &rArr; i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[73]"></a>adc_init</STRONG> (Thumb, 216 bytes, Stack size 88 bytes, drv_adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = adc_init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VrefintCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>adc_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_adc.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_read &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>apid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, angle_pid.o(i.apid))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apid &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[84]"></a>atan2approx</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, imu.o(i.atan2approx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = atan2approx &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
</UL>

<P><STRONG><a name="[86]"></a>beacon_sequence</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rx_bayang_protocol_telemetry.o(i.beacon_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = beacon_sequence &rArr; send_telemetry &rArr; xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextchannel
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[de]"></a>bitbang_data</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, drv_dshot.o(i.bitbang_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bitbang_data
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[8c]"></a>calcmagnitude</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, imu.o(i.calcmagnitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = calcmagnitude &rArr; Q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
</UL>

<P><STRONG><a name="[8d]"></a>change_pid_value</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pid.o(i.change_pid_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = change_pid_value &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_pid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_pid
</UL>

<P><STRONG><a name="[b9]"></a>check_command</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, gesture_detect.o(i.check_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_sequence
</UL>

<P><STRONG><a name="[8e]"></a>checkrx</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, rx_bayang_protocol_telemetry.o(i.checkrx))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = checkrx &rArr; beacon_sequence &rArr; send_telemetry &rArr; xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeregs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextchannel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodepacket
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>control</STRONG> (Thumb, 1342 bytes, Stack size 48 bytes, control.o(i.control))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = control &rArr; pid &rArr; lpf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_precalc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motormap
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apid
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorlpf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>decrease_pid</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pid.o(i.decrease_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decrease_pid &rArr; change_pid_value &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pid_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[a5]"></a>delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_time.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_output
</UL>

<P><STRONG><a name="[9e]"></a>esc4wayInit</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, serial_4way.o(i.esc4wayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = esc4wayInit &rArr; softserial_init &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>esc4wayProcess</STRONG> (Thumb, 690 bytes, Stack size 304 bytes, serial_4way.o(i.esc4wayProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = esc4wayProcess &rArr; Connect &rArr; BL_ConnectEx &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteFlash
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteEEprom
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_VerifyFlash
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDRunRestartBootloader
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDKeepAlive
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadFlash
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadEEprom
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_PageErase
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMcuConnected
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayRelease
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteCrc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteCrc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>esc4wayRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, serial_4way.o(i.esc4wayRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = esc4wayRelease &rArr; pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[57]"></a>failloop</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.failloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = failloop &rArr; pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledon
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledoff
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeword
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[a7]"></a>fastcos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, util.o(i.fastcos))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fastcos &rArr; fastsin &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
</UL>

<P><STRONG><a name="[a8]"></a>fastsin</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, util.o(i.fastsin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fastsin &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastcos
</UL>

<P><STRONG><a name="[a9]"></a>flash_get_hard_coded_pid_identifier</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, flash.o(i.flash_get_hard_coded_pid_identifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_get_hard_coded_pid_identifier &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hard_coded_pid_identifier
</UL>

<P><STRONG><a name="[aa]"></a>flash_hard_coded_pid_identifier</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.flash_hard_coded_pid_identifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = flash_hard_coded_pid_identifier &rArr; flash_get_hard_coded_pid_identifier &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_hard_coded_pid_identifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>flash_load</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, flash.o(i.flash_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_load &rArr; fmc_read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_float
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>flash_save</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, flash.o(i.flash_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = flash_save &rArr; fmc_write_float &rArr; writeword &rArr; failloop &rArr; pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeword
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_float
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[b1]"></a>fmc_erase</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_fmc1.o(i.fmc_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_erase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[b5]"></a>fmc_lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_fmc1.o(i.fmc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[ac]"></a>fmc_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_fmc1.o(i.fmc_read))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read_float
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load
</UL>

<P><STRONG><a name="[ad]"></a>fmc_read_float</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, drv_fmc1.o(i.fmc_read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_read_float
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load
</UL>

<P><STRONG><a name="[b0]"></a>fmc_unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_fmc1.o(i.fmc_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fmc_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[b3]"></a>fmc_write_float</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_fmc1.o(i.fmc_write_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_write_float &rArr; writeword &rArr; failloop &rArr; pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeword
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[b8]"></a>gesture_sequence</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, gesture_detect.o(i.gesture_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gesture_sequence &rArr; check_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_command
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures2
</UL>

<P><STRONG><a name="[ba]"></a>gestures</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, gestures.o(i.gestures))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = gestures &rArr; acc_cal &rArr; sixaxis_read &rArr; i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_pid_term
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_pid_axis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_pid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures2
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_pid
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>gestures2</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, gesture_detect.o(i.gestures2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gestures2 &rArr; gesture_sequence &rArr; check_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_sequence
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[52]"></a>gettime</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, drv_time.o(i.gettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledflash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte_ex
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_read_byte_ex
</UL>

<P><STRONG><a name="[c1]"></a>gpio_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>gyro_cal</STRONG> (Thumb, 370 bytes, Stack size 88 bytes, sixaxis.o(i.gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = gyro_cal &rArr; i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readdata
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>i2c_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_init &rArr; softi2c_init &rArr; sdahigh &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>i2c_readdata</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_i2c.o(i.i2c_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
</UL>

<P><STRONG><a name="[c8]"></a>i2c_readreg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_i2c.o(i.i2c_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_readreg &rArr; softi2c_read &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_check
</UL>

<P><STRONG><a name="[ca]"></a>i2c_writereg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_i2c.o(i.i2c_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_writereg &rArr; softi2c_write &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_init
</UL>

<P><STRONG><a name="[cc]"></a>imu_calc</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, imu.o(i.imu_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = imu_calc &rArr; calcmagnitude &rArr; Q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcmagnitude
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2approx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpfcalc_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>imu_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, imu.o(i.imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = imu_init &rArr; sixaxis_read &rArr; i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>increase_pid</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pid.o(i.increase_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = increase_pid &rArr; change_pid_value &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pid_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[45]"></a>isMcuConnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_4way.o(i.isMcuConnected))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadBuf
</UL>

<P><STRONG><a name="[c3]"></a>led_pwm</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, led.o(i.led_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = led_pwm &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledon
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledoff
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
</UL>

<P><STRONG><a name="[cf]"></a>ledflash</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.ledflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ledflash &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledon
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledoff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>ledoff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(i.ledoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledoff
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledflash
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
</UL>

<P><STRONG><a name="[a4]"></a>ledon</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(i.ledon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledon
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledflash
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
</UL>

<P><STRONG><a name="[72]"></a>limitf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, util.o(i.limitf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = limitf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pwm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_vector
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apid
</UL>

<P><STRONG><a name="[71]"></a>lpf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, util.o(i.lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lpf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorlpf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[d2]"></a>lpf2</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, pid.o(i.lpf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lpf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid
</UL>

<P><STRONG><a name="[c4]"></a>lpfcalc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, util.o(i.lpfcalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lpfcalc &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
</UL>

<P><STRONG><a name="[cd]"></a>lpfcalc_hz</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, util.o(i.lpfcalc_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lpfcalc_hz &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
</UL>

<P><STRONG><a name="[d3]"></a>lpffilter</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, filter.o(i.lpffilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lpffilter &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 926 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = main &rArr; esc4wayProcess &rArr; Connect &rArr; BL_ConnectEx &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sixaxis_check
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledon
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledoff
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledflash
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cal
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_load
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hard_coded_pid_identifier
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_4way_external_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[dd]"></a>make_packet</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, drv_dshot.o(i.make_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[94]"></a>mapf</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, util.o(i.mapf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mapf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[db]"></a>mosi_input</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_spi_3wire.o(i.mosi_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mosi_input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
</UL>

<P><STRONG><a name="[98]"></a>motorlpf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, control.o(i.motorlpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = motorlpf &rArr; lpf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[9a]"></a>motormap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motorcurve.o(i.motormap))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[be]"></a>next_pid_axis</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pid.o(i.next_pid_axis))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[bd]"></a>next_pid_term</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pid.o(i.next_pid_term))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gestures
</UL>

<P><STRONG><a name="[8a]"></a>nextchannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rx_bayang_protocol_telemetry.o(i.nextchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nextchannel &rArr; xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[9c]"></a>packettodata</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rx_bayang_protocol_telemetry.o(i.packettodata))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = packettodata &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodepacket
</UL>

<P><STRONG><a name="[96]"></a>pid</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, pid.o(i.pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pid &rArr; lpf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[95]"></a>pid_precalc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pid.o(i.pid_precalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pid_precalc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[a3]"></a>pwm_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_dshot.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayRelease
</UL>

<P><STRONG><a name="[97]"></a>pwm_set</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drv_dshot.o(i.pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_packet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbang_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayRelease
</UL>

<P><STRONG><a name="[d9]"></a>rgb_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rgb.o(i.rgb_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>rx_init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, rx_bayang_protocol_telemetry.o(i.rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rx_init &rArr; xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeregs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>sclhigh</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_softi2c.o(i.sclhigh))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_init
</UL>

<P><STRONG><a name="[6c]"></a>sclhighlow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_softi2c.o(i.sclhighlow))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
</UL>

<P><STRONG><a name="[68]"></a>scllow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_softi2c.o(i.scllow))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>

<P><STRONG><a name="[64]"></a>sdahigh</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_softi2c.o(i.sdahigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdahigh &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoutput
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softi2c_init
</UL>

<P><STRONG><a name="[69]"></a>sdalow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_softi2c.o(i.sdalow))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoutput
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>

<P><STRONG><a name="[87]"></a>send_telemetry</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, rx_bayang_protocol_telemetry.o(i.send_telemetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = send_telemetry &rArr; xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writepayload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
</UL>

<P><STRONG><a name="[65]"></a>setoutput</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_softi2c.o(i.setoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdalow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>

<P><STRONG><a name="[d7]"></a>sixaxis_check</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sixaxis.o(i.sixaxis_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sixaxis_check &rArr; i2c_readreg &rArr; softi2c_read &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>sixaxis_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sixaxis.o(i.sixaxis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sixaxis_init &rArr; i2c_writereg &rArr; softi2c_write &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writereg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>sixaxis_read</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, sixaxis.o(i.sixaxis_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sixaxis_read &rArr; i2c_readdata &rArr; softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpffilter
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_cal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>softi2c_init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, drv_softi2c.o(i.softi2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = softi2c_init &rArr; sdahigh &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdahigh
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sclhigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[c9]"></a>softi2c_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_softi2c.o(i.softi2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = softi2c_read &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readreg
</UL>

<P><STRONG><a name="[c7]"></a>softi2c_readdata</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, drv_softi2c.o(i.softi2c_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = softi2c_readdata &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_restart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readdata
</UL>

<P><STRONG><a name="[cb]"></a>softi2c_write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_softi2c.o(i.softi2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = softi2c_write &rArr; _sendbyte &rArr; sdalow &rArr; setoutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendstart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writereg
</UL>

<P><STRONG><a name="[9f]"></a>softserial_init</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, drv_softserial.o(i.softserial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = softserial_init &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_tx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_rx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayInit
</UL>

<P><STRONG><a name="[5c]"></a>softserial_read_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_softserial.o(i.softserial_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = softserial_read_byte &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_read_byte_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>

<P><STRONG><a name="[e8]"></a>softserial_read_byte_ex</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, drv_softserial.o(i.softserial_read_byte_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart_getc_
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_read_byte
</UL>

<P><STRONG><a name="[3b]"></a>softserial_set_input</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_softserial.o(i.softserial_set_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = softserial_set_input &rArr; softserial_init_rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_is_1wire
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ConnectEx
</UL>

<P><STRONG><a name="[48]"></a>softserial_set_output</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_softserial.o(i.softserial_set_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_is_1wire
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
</UL>

<P><STRONG><a name="[61]"></a>softserial_write_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_softserial.o(i.softserial_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softserial_write_byte &rArr; softserial_write_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteCrc
</UL>

<P><STRONG><a name="[ea]"></a>softserial_write_byte_ex</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, drv_softserial.o(i.softserial_write_byte_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = softserial_write_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart_putc_
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte
</UL>

<P><STRONG><a name="[e1]"></a>spi_csoff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_spi_3wire.o(i.spi_csoff))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writepayload
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeregs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[df]"></a>spi_cson</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_spi_3wire.o(i.spi_cson))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writepayload
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeregs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[d4]"></a>spi_init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_spi_3wire.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>spi_recvbyte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_spi_3wire.o(i.spi_recvbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_recvbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
</UL>

<P><STRONG><a name="[e0]"></a>spi_sendbyte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_spi_3wire.o(i.spi_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writereg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_writepayload
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readreg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_readpayload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xn_command
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeregs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[9b]"></a>stick_vector</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stickvector.o(i.stick_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = stick_vector &rArr; fastcos &rArr; fastsin &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastcos
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[d5]"></a>time_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_time.o(i.time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>time_update</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_time.o(i.time_update))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettime
</UL>

<P><STRONG><a name="[91]"></a>writeregs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rx_bayang_protocol_telemetry.o(i.writeregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = writeregs &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[b2]"></a>writeword</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_fmc1.o(i.writeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = writeword &rArr; failloop &rArr; pwm_set &rArr; bitbang_data
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failloop
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_float
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_save
</UL>

<P><STRONG><a name="[8b]"></a>xn_command</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_xn297_3wire.o(i.xn_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xn_command &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[8f]"></a>xn_readpayload</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_xn297_3wire.o(i.xn_readpayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xn_readpayload &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recvbyte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mosi_input
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[88]"></a>xn_readreg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_xn297_3wire.o(i.xn_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xn_readreg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_recvbyte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mosi_input
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[e3]"></a>xn_writepayload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_xn297_3wire.o(i.xn_writepayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xn_writepayload &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
</UL>

<P><STRONG><a name="[89]"></a>xn_writereg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_xn297_3wire.o(i.xn_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xn_writereg &rArr; spi_sendbyte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_sendbyte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_csoff
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telemetry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextchannel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_sequence
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[da]"></a>setup_4way_external_interrupt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.setup_4way_external_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>decodepacket</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, rx_bayang_protocol_telemetry.o(i.decodepacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = decodepacket &rArr; packettodata &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packettodata
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrx
</UL>

<P><STRONG><a name="[21]"></a>__sti___10_filter_cpp_filter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, filter.o(i.__sti___10_filter_cpp_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___10_filter_cpp_filter &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filter.o(.init_array)
</UL>
<P><STRONG><a name="[e5]"></a>softserial_init_rx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_softserial.o(i.softserial_init_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softserial_init_rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_input
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[e4]"></a>softserial_init_tx</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_softserial.o(i.softserial_init_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_output
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_init
</UL>

<P><STRONG><a name="[e9]"></a>softserial_is_1wire</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_softserial.o(i.softserial_is_1wire))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_output
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_input
</UL>

<P><STRONG><a name="[51]"></a>Connect</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, serial_4way.o(i.Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Connect &rArr; BL_ConnectEx &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ConnectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[5b]"></a>ReadByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial_4way.o(i.ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadByte &rArr; softserial_read_byte &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteCrc
</UL>

<P><STRONG><a name="[5d]"></a>ReadByteCrc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, serial_4way.o(i.ReadByteCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReadByteCrc &rArr; ReadByte &rArr; softserial_read_byte &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crc_xmodem_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[60]"></a>WriteByteCrc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial_4way.o(i.WriteByteCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WriteByteCrc &rArr; softserial_write_byte &rArr; softserial_write_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crc_xmodem_update
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc4wayProcess
</UL>

<P><STRONG><a name="[3f]"></a>BL_GetACK</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, serial_4way_avrootloader.o(i.BL_GetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BL_GetACK &rArr; suart_getc_ &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart_getc_
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetBuffer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_VerifyFlash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDKeepAlive
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_PageErase
</UL>

<P><STRONG><a name="[43]"></a>BL_ReadA</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serial_4way_avrootloader.o(i.BL_ReadA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BL_ReadA &rArr; BL_SendCMDSetAddress &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadFlash
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadEEprom
</UL>

<P><STRONG><a name="[3e]"></a>BL_ReadBuf</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, serial_4way_avrootloader.o(i.BL_ReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BL_ReadBuf &rArr; suart_getc_ &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart_getc_
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteCrc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMcuConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadA
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ConnectEx
</UL>

<P><STRONG><a name="[3d]"></a>BL_SendBuf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial_4way_avrootloader.o(i.BL_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart_putc_
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteCrc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMcuConnected
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_output
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_set_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetBuffer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadA
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_VerifyFlash
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDRunRestartBootloader
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDKeepAlive
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_PageErase
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ConnectEx
</UL>

<P><STRONG><a name="[42]"></a>BL_SendCMDSetAddress</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.BL_SendCMDSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BL_SendCMDSetAddress &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadA
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_VerifyFlash
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_PageErase
</UL>

<P><STRONG><a name="[4c]"></a>BL_SendCMDSetBuffer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, serial_4way_avrootloader.o(i.BL_SendCMDSetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BL_SendCMDSetBuffer &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteA
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_VerifyFlash
</UL>

<P><STRONG><a name="[4e]"></a>BL_WriteA</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial_4way_avrootloader.o(i.BL_WriteA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BL_WriteA &rArr; BL_SendCMDSetBuffer &rArr; BL_SendBuf &rArr; softserial_set_output &rArr; softserial_init_tx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetBuffer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendCMDSetAddress
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteFlash
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_WriteEEprom
</UL>

<P><STRONG><a name="[44]"></a>ByteCrc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial_4way_avrootloader.o(i.ByteCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadBuf
</UL>

<P><STRONG><a name="[40]"></a>suart_getc_</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.suart_getc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = suart_getc_ &rArr; softserial_read_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_read_byte_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_ReadBuf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_GetACK
</UL>

<P><STRONG><a name="[49]"></a>suart_putc_</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial_4way_avrootloader.o(i.suart_putc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = suart_putc_ &rArr; softserial_write_byte_ex &rArr; gettime
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softserial_write_byte_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_SendBuf
</UL>

<P><STRONG><a name="[5f]"></a>SetSysClock</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
